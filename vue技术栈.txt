## 使用Vue-Cli3 创建一个项目
1、 使用vue UI创建、管理项目
2、 项目结构目录整理
3、 初始文件添加
4、 基本配置讲解
5、 跨域配置

## 路由详解（一）
1、router-link和router-view组件
2、路由配置
	a.动态路由
		path: '/argu/:name'
		$route.params.name
	b.嵌套路由
		path: '/parent'
		children: [
			{
				path: 'child'		-> 不需要加/ 
			}
		]
	c.命名路由
		path: '/about',
		name: 'about'
		
		<router-link v-bind:to="{ name: 'about' }">
		
	d.命名视图
		path: '/name_view',
		components: {
		  default: () => import('@/views/Child.vue'),
		  email: () => import('@/views/Email.vue'),
		  tel: () => import('@/views/Tel.vue')
		}
3、JS操作路由
4、重定向和别名
	a.重定向
		path: '/main',
		redirect: '/'
	b.别名
		alias: '/home_page',
		
**编程式导航**

## 路由详解（二）
1、路由组件传参
	props: {
		food: {
			type: String,
			default: 'apple'
		}
	}
	a.boolean
		props: true
	b.对象模式
		props: {
			food: 'banana'
		}
	c.函数模式
		props: route => ({
			food: route.query.food
		})
	
		
2、HTML5 History模式
	默认hash /#/
	model: 'history' 无刷新页面的跳转（需要后端的支持 404）
		
3、导航守卫
	登录状态、权限
	a.全局
		router.beforeEach((to, from, next) => {
		  if (to.name !== 'login') {
			if (HAS_LOGINED) next()
			else next({ name: 'login' })
		  } else {
			if (HAS_LOGINED) next({ name: 'home' })
			else next()
		  }
		})
		// const router = new Router({
				routes
		   })
		// export default router
	b.独有
		beforeEnter: (to, from, next) => {
		  // if (from.name === 'about') alert('这是从about页来的')
		  // else alert('这不是about页来的')
		  // // 一定要调用next() 否则不会跳转
		  next()
		}
		
	 * 1.导航被触发
	 * 2.在失活的组件里(即将离开的页面组件)调用离开守卫 beforeRouteLeave
	 * 3.调用全局的前置守卫 beforeEach
	 * 4.在重用的组件里调用 beforeRouteUpdate / 不复用的组件 调用 beforeRouteEnter
	 * 5.调用路由独享的守卫 beforeEnter
	 * 6.解析异步路由组件
	 * 7.在被激活的组件(即将进入的页面组件)里调用beforeRouteEnter
	 * 8.调用全局的解析守卫 beforeResolve
	 * 9.导航被确认
	 * 10.调用全局的后置守卫 afterEach
	 * 11.触发DOM更新
	 * 12.用创建好的实例调用beforeRouteEnter守卫里传给next的回调函数
	 
4、路由元信息
	meta: {}
	
5、过渡效果
	transition
	transition-group
	

## 状态管理
1、Bus（不复杂的时候使用）
	$bus
	$emit
	$on
2、Vuex - 基础 - state&getter
	1) state:
		a.根状态: this.$store.state.appName
		b.模块:   this.$store.state.user.userName
		
		c.import {mapState} from 'vuex'
			computed: {
				...mapState(['appName'])
				
			}
			
			computed: {
				...mapState({
					appName: state => state.appName,
					userName: state => state.user.userName
				})
			}
			
			computed: {
				...mapState('user', {
					userName: state => state.userName
				})
			}
		
		d.命名空间 namespaced: true （user.js）
			import { createNamespaceedHelpers } from 'vuex'
			const { mapState } = createNamespaceedHelpers('user')
			computed: {
				...mapState({
					userName: state => state.userName
				})
			}
		 
	2) getter:
		a.根
			this.$store.getter.appNameWithVersion
		
			import {mapState, mapGetters} from 'vuex'
			...mapGetters(['appNameWithVersion'])
		b.模块中
			this.$store.getter.user.firstLetter
			
	直接使用 (不使用命名空间)
		import {mapState, mapGetters} from 'vuex'
		...mapState({
			userName: state => state.user.userName
		})
		
2、Vuex - 基础 - mutation&action/module
3、Vuex - 进阶	
	
	* props
	* $emit
	* event.target.value 
	
	
	
